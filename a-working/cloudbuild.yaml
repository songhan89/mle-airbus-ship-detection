steps:
# Installing Dependencies
- name: 'python:3.7-slim'
  id: Dependencies
  entrypoint: pip
  args:
  - 'install'
  - '-r'
  - 'a-working/requirements.txt'
  - '-v'

# import kfp
# import kfp.dsl as dsl
# from kfp.v2.dsl import (
#     component,
#     Input,
#     Output,
#     Dataset,
#     Metrics,
# )

# Unit Test
- name: 'python:3.7-slim'
  id: Test
  entrypoint: python
  args:
  - 'a-working/unit_tests.py'
  - '-v'

# # Data Validation
# - name: 'python:3.7-slim'
#   id: Data Validation
#   entrypoint: /bin/sh
#   args:
#   - -c
#   - 'python ./a-working/data_validation.py -v'

# # Data Processing
# - name: 'python:3.7-slim'
#   id: Data Processing
#   entrypoint: /bin/sh
#   args:
#   - -c
#   - 'python ./a-working/data_processing.py -v'

# # Training Pipeline
# - name: 'python:3.7-slim'
#   id: Training Pipeline
#   entrypoint: /bin/sh
#   args:
#   - -c
#   - 'python ./a-working/training_pipeline.py -v'

# # This step builds the container image and specifies where to read from and where to build it
# - name: 'gcr.io/cloud-builders/docker'
#   id: Build
#   args:
#   - 'build'
#   - '-t'
#   - 'asia-east1-docker.pkg.dev/$PROJECT_ID/mle-airbus-detection-repository/testing-app:$SHORT_SHA'
#   - '-f'
#   - 'a-working/Dockerfile'
#   - '.'

# # This step pushes the image to Artifact Registry
# # The PROJECT_ID and SHORT_SHA variables are automatically
# # replaced by Cloud Build.
# - name: 'gcr.io/cloud-builders/docker'
#   id: Push
#   args:
#   - 'push'
#   - 'asia-east1-docker.pkg.dev/$PROJECT_ID/mle-airbus-detection-repository/testing-app:$SHORT_SHA'